% Copyright 2004 by Till Tantau <tantau@users.sourceforge.net>.
%
% In principle, this file can be redistributed and/or modified under
% the terms of the GNU Public License, version 2.
%
% However, this file is supposed to be a template to be modified
% for your own needs. For this reason, if you use this file as a
% template and not specifically distribute it as part of a another
% package/program, I grant the extra permission to freely copy and
% modify this file as you see fit and even to delete this copyright
% notice. 

\documentclass{beamer}
% Replace the \documentclass declaration above
% with the following two lines to typeset your 
% lecture notes as a handout:
%\documentclass{article}
%\usepackage{beamerarticle}
\usepackage{hyperref}

% There are many different themes available for Beamer. A comprehensive
% list with examples is given here:
% http://deic.uab.es/~iblanes/beamer_gallery/index_by_theme.html
% You can uncomment the themes below if you would like to use a different
% one:
%\usetheme{AnnArbor}
%\usetheme{Antibes}
%\usetheme{Bergen}
%\usetheme{Berkeley}
%\usetheme{Berlin}
%\usetheme{Boadilla}
%\usetheme{boxes}
%\usetheme{CambridgeUS}
%\usetheme{Copenhagen}
%\usetheme{Darmstadt}
%\usetheme{default}
%\usetheme{Frankfurt}
\usetheme{Goettingen}
%\usetheme{Hannover}
%\usetheme{Ilmenau}
%\usetheme{JuanLesPins}
%\usetheme{Luebeck}
%\usetheme{Madrid}
%\usetheme{Malmoe}
%\usetheme{Marburg}
%\usetheme{Montpellier}
%\usetheme{PaloAlto}
%\usetheme{Pittsburgh}
%\usetheme{Rochester}
%\usetheme{Singapore}
%\usetheme{Szeged}
%\usetheme{Warsaw}

\title{Programming with C}

% A subtitle is optional and this may be deleted
\subtitle{3. Introduction to Scientific Computing with Linux\\Part III. Basic Computing}

\author{Nidish Narayanaa B\inst{1}}% \and S.~Another\inst{2}}
% - Give the names in the same order as the appear in the paper.
% - Use the \inst{?} command only if the authors have different
%   affiliation.

\institute[Universities of Somewhere and Elsewhere] % (optional, but mostly needed)
{
  \inst{1}%
  Department of Aerospace Engineering\\
  Indian Institute of Space Science \& Technology, Trivandrum
  }
% - Use the \inst command only if there are several affiliations.
% - Keep it simple, no one is interested in your street address.

\date{FOSS Club, IIST, 2016}
% - Either use conference name or its abbreviation.
% - Not really informative to the audience, more for people (including
%   yourself) who are reading the slides online

\subject{CTut_IISTFOSS}
% This is only inserted into the PDF information catalog. Can be left
% out. 

% If you have a file called "university-logo-filename.xxx", where xxx
% is a graphic format that can be processed by latex or pdflatex,
% resp., then you can add a logo as follows:

% \pgfdeclareimage[height=0.5cm]{university-logo}{university-logo-filename}
% \logo{\pgfuseimage{university-logo}}

% Delete this, if you do not want the table of contents to pop up at
% the beginning of each subsection:
\AtBeginSection[]
{
  \begin{frame}<beamer>{Outline}
    \tableofcontents[currentsection,currentsubsection]
  \end{frame}
}

% Let's get started
\begin{document}

\begin{frame}
  \titlepage
\end{frame}

\begin{frame}{Outline}
  \tableofcontents
  % You might wish to add the option [pausesections]
\end{frame}

% Section and subsections will appear in the presentation overview
% and table of contents.
\section{Introduction}

\subsection{Programming Language Fundamentals}
\subsubsection{Baring It All}
\begin{frame}{What C Sees When You C}{The bare minimal intro}
\begin{itemize}
\item Long story short (of what is to come in the next few slides), the computer understands in binary; people do in English
\item We need software to convert english to machine language (compilers, interpretors, assemblers, ...) and from machine code back to human language (Execution)\footnote{Please note that C is not a person - he does not see when you C}
\end{itemize}
\end{frame}
\begin{frame}{Programming Languages}{What are they anyways?}
\begin{block}{Words of Wisdom \#1}
A programming language is a language in which you program\footnote{Sorry for the awful joke - I feel the actual definition is better left to some private moments between you and google}
\end{block}
\end{frame}
\begin{frame}{Low-level and High-Level Languages}{How \textbf{C}lose are you?}
\begin{center}
\textbf{Low-Level Languages}
\end{center}
\begin{itemize}
\item<1-> First there were Machine languages - you had to write instructions in binary
\item<2-> Next, in the early 50s there came symbolic, or assembly languages (aka second-generation languages) using macros and mnemonics - these were translated into machine code by an \emph{assembler}
\item<2-> Mnemonics were actual letters representing operations instead of binary, while macros were a set of letters which were replaced by the binary instruction by the assembler
\item<3-> These languages had a major drawback of lack of portability
\item<4-> To patch the lack of portability came \emph{high-level languages}
\end{itemize}
\end{frame}

\begin{frame}{Low-level and High-Level Languages}{How \textbf{C}lose are you?}
\begin{center}
\textbf{High-Level Languages}
\end{center}
\begin{itemize}
\item<1-> The programmer no longer had to care about hardware features and can be more comfortable with syntaxes that were closer to "natural language"
\item<2-> These have to translated into machine codes called compilers or interpretors
\item<3-> Fortran is the name to remember (\emph{For}mula \emph{tran}slation, for those interested) - the first high-level programming language
\item<4-> LISP, COBOL, ALGOL, etc followed, catering to specific user subsets
\item<5-> Then came C, created by Dennis Ritchie (Bell Laboratories)
\item<6-> It quickly became prominent partly because Dennis Ritchie wrote a whole operating system, the UNIX in C (a practice previously unknown in high-level languages)
\end{itemize}
\end{frame}

\begin{frame}{Low-level and High-Level Languages}{Beyond the Third Gen}
\begin{itemize}
\item<1-> The Fourth generation of programming languages saw a host of non-procedural programming languages
\item<1-> They specify what is to be accomplished without specifying how - the first of this was FORTH
\item<2-> The fifth generation, currently still in its infancy is an outgrowth of artificial intelligence research
\item<2-> I don't quite get this concept honestly
\end{itemize}
\end{frame}
\subsubsection{Interpreter and Compiler based languages}
\begin{frame}{Interpreter and Compiler Based Languages}{Are we understood (and how)?}
Each programming language has to convert human-readable code into Machine code. There are two ways this is achieved - Interpreter-based and Compiler-based.
\begin{columns}
\begin{column}{0.5\textwidth}
\begin{center}
\textbf{Interpreter}
\end{center}
\begin{itemize}
\item Translates program one statement at a time
\item No Object code generated
\item Takes lesser code analysis time but more execution time
\item Easier to debug
\item Examples, Python, Ruby, Perl, etc.
\end{itemize}
\end{column}
\begin{column}{0.5\textwidth}
\begin{center}
\textbf{Compiler}
\end{center}
\begin{itemize}
\item Scans the entire program and translates it as a whole into machine code
\item Intermediate Object code generated
\item Takes more analysis time (compilation) but lesser execution time
\item Slightly harder to debug
\item Examples, C,C++
\end{itemize}
\end{column}
\end{columns}
\end{frame}
\subsection{The Compile-Link Build process of C}
\begin{frame}{The Build Process in C}{Take a bow, GCC}

\end{frame}
\subsection*{References}
\begin{frame}{References}
\begin{itemize}
\item \url{http://www.programiz.com/article/difference-compiler-interpreter}
\item \url{http://www.infoplease.com/encyclopedia/science/programming-language-evolution-high-level-languages.html}
\end{itemize}
\end{frame}

\section{C Programming Fundamentals}
\subsection{Libraries}
\begin{frame}{The Concept of Libraries}{You need them more than they need you}

\end{frame}
\subsection{File Streams}
\begin{frame}{File Streams}{And how to domesticate them}

\end{frame}
\subsection{Functions}
\begin{frame}{Functions}{And the wizardry}

\end{frame}
\subsection{Miscellaneous Basics}
\begin{frame}{Loops, Conditionals, ...}{And the foundations}

\end{frame}

\section{C Programming Not-So-Fundamentals}
\subsection{Parsing Command-Line Arguments}
\begin{frame}{Parsing Command-Line Arguments}{The First Step towards Building a presentable program}

\end{frame}
\subsection{Piping In and Piping Out}
\begin{frame}{Piping In and Piping Out}{Making the Program Closer to Heart}

\end{frame}
\subsection{Processes, Threads and Pipes}
\begin{frame}{Processes, Threads and Pipes}{Empower your Programming Experience}

\end{frame}
\subsection{Programming With Class}
\begin{frame}{Programming With Class}{Swag is for boys, Class is for programmers}

\end{frame}

\section{Some Useful Libraries}
\begin{frame}{Some Useful Libraries}{Something worth your time}
\begin{description}
\item[FFTW] (Fastest Fourier Transform in the West) No idea about the name - but comes in really handly for signal processing and other applications
\item[GSL] (GNU Scientific Library) Another GNU produce - indispensable for my everyday existence - has got just about anything you might need
\item[GL,GLU,GLUT] (OpenGL class of Libraries) A very handy library to be abreast of the basics of - opened my eyes, I should say
\end{description}
\end{frame}

\end{document}
